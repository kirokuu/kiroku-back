# 허용 주소
map $http_origin $cors {
      default "";
      "http://localhost:3000" "http://localhost:3000";
      "https://www.kirocu.store" "https://www.kirocu.store";
}

# HTTP 포트 80 → HTTPS로 리디렉션
server {
    listen 80;
    server_name api.kirocu.store;

    # 이외의 사이트 1차 필터
    if ($cors = "") {
        return 403;
    }

    add_header 'Access-Control-Allow-Origin' $cors always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    #브라우저 공격 보안 헤더 추가
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;

    # OPTIONS 요청 (preflight) 처리
    if ($request_method = OPTIONS) {
        return 204;
    }

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name api.kirocu.store;

    ##ssl인증서
    ssl_certificate /etc/letsencrypt/live/api.kirocu.store/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.kirocu.store/privkey.pem;

    # 오래 걸리는 요청은 스레드풀로 분리 처리
    location /large-task {
        sendfile on;
        aio threads=default;
    }

    location / {
        # 이외의 사이트 1차 필터
        if ($cors = "") {
            return 403;
        }

        # CORS 헤더
        add_header 'Access-Control-Allow-Origin' $cors always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' 86400;

        #브라우저 공격 보안 헤더 추가
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-XSS-Protection "1; mode=block" always;

        # OPTIONS 요청 (preflight) 처리
        if ($request_method = OPTIONS) {
            return 204;
        }

        proxy_pass http://spring:8090;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
